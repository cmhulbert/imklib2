    fun int8s(vararg dim: Long) = bytes(*dim)
    fun int8s(vararg dim: Int) = bytes(*dim.longs)
    fun int16s(vararg dim: Long) = shorts(*dim)
    fun int16s(vararg dim: Int) = shorts(*dim.longs)
    fun int32s(vararg dim: Long) = ints(*dim)
    fun int32s(vararg dim: Int) = ints(*dim.longs)
    fun int64s(vararg dim: Long) = longs(*dim)
    fun int64s(vararg dim: Int) = longs(*dim.longs)
    fun <A: ByteAccess> int8s(access: A, vararg dim: Long) = bytes(access, *dim)
    fun <A: ByteAccess> int8s(access: A, vararg dim: Int) = bytes(access, *dim.longs)
    fun <A: ShortAccess> int16s(access: A, vararg dim: Long) = shorts(access, *dim)
    fun <A: ShortAccess> int16s(access: A, vararg dim: Int) = shorts(access, *dim.longs)
    fun <A: IntAccess> int32s(access: A, vararg dim: Long) = ints(access, *dim)
    fun <A: IntAccess> int32s(access: A, vararg dim: Int) = ints(access, *dim.longs)
    fun <A: LongAccess> int64s(access: A, vararg dim: Long) = longs(access, *dim)
    fun <A: LongAccess> int64s(access: A, vararg dim: Int) = longs(access, *dim.longs)

    fun uint8s(vararg dim: Long) = unsignedBytes(*dim)
    fun uint8s(vararg dim: Int) = unsignedBytes(*dim.longs)
    fun uint16s(vararg dim: Long) = unsignedShorts(*dim)
    fun uint16s(vararg dim: Int) = unsignedShorts(*dim.longs)
    fun uint32s(vararg dim: Long) = unsignedInts(*dim)
    fun uint32s(vararg dim: Int) = unsignedInts(*dim.longs)
    fun uint64s(vararg dim: Long) = unsignedLongs(*dim)
    fun uint64s(vararg dim: Int) = unsignedLongs(*dim.longs)
    fun <A: ByteAccess> uint8s(access: A, vararg dim: Long) = unsignedBytes(access, *dim)
    fun <A: ByteAccess> uint8s(access: A, vararg dim: Int) = unsignedBytes(access, *dim.longs)
    fun <A: ShortAccess> uint16s(access: A, vararg dim: Long) = unsignedShorts(access, *dim)
    fun <A: ShortAccess> uint16s(access: A, vararg dim: Int) = unsignedShorts(access, *dim.longs)
    fun <A: IntAccess> uint32s(access: A, vararg dim: Long) = unsignedInts(access, *dim)
    fun <A: IntAccess> uint32s(access: A, vararg dim: Int) = unsignedInts(access, *dim.longs)
    fun <A: LongAccess> uint64s(access: A, vararg dim: Long) = unsignedLongs(access, *dim)
    fun <A: LongAccess> uint64s(access: A, vararg dim: Int) = unsignedLongs(access, *dim.longs)

    fun float32s(vararg dim: Long) = floats(*dim)
    fun float32s(vararg dim: Int) = floats(*dim.longs)
    fun float64s(vararg dim: Long) = doubles(*dim)
    fun float64s(vararg dim: Int) = doubles(*dim.longs)
    fun <A: FloatAccess> float32s(access: A, vararg dim: Long) = floats(access, *dim)
    fun <A: FloatAccess> float32s(access: A, vararg dim: Int) = floats(access, *dim.longs)
    fun <A: DoubleAccess> float64s(access: A, vararg dim: Long) = doubles(access, *dim)
    fun <A: DoubleAccess> float64s(access: A, vararg dim: Int) = doubles(access, *dim.longs)

    fun complex64s(vararg dim: Long) = complexFloats(*dim)
    fun complex64s(vararg dim: Int) = complexFloats(*dim.longs)
    fun complex128s(vararg dim: Long) = complexDoubles(*dim)
    fun complex128s(vararg dim: Int) = complexDoubles(*dim.longs)
    fun <A: FloatAccess> complex64s(access: A, vararg dim: Long) = complexFloats(access, *dim)
    fun <A: FloatAccess> complex64s(access: A, vararg dim: Int) = complexFloats(access, *dim.longs)
    fun <A: DoubleAccess> complex128s(access: A, vararg dim: Long) = complexDoubles(access, *dim)
    fun <A: DoubleAccess> complex128s(access: A, vararg dim: Int) = complexDoubles(access, *dim.longs)

    inline fun int8s(vararg dim: Long, init: (Int) -> Byte) = bytes(*dim).init { i, t -> t.set(init(i)) }
    inline fun int8s(vararg dim: Int, init: (Int) -> Byte) = bytes(*dim).init { i, t -> t.set(init(i)) }
    inline fun int16s(vararg dim: Long, init: (Int) -> Short) = shorts(*dim).init { i, t -> t.set(init(i)) }
    inline fun int16s(vararg dim: Int, init: (Int) -> Short) = shorts(*dim).init { i, t -> t.set(init(i)) }
    inline fun int32s(vararg dim: Long, init: (Int) -> Int) = ints(*dim).init { i, t -> t.set(init(i)) }
    inline fun int32s(vararg dim: Int, init: (Int) -> Int) = ints(*dim).init { i, t -> t.set(init(i)) }
    inline fun int64s(vararg dim: Long, init: (Int) -> Long) = longs(*dim).init { i, t -> t.set(init(i)) }
    inline fun int64s(vararg dim: Int, init: (Int) -> Long) = longs(*dim).init { i, t -> t.set(init(i)) }
    inline fun <A: ByteAccess> int8s(access: A, vararg dim: Long, init: (Int) -> Byte) = bytes(access, *dim).init { i, t -> t.set(init(i)) }
    inline fun <A: ByteAccess> int8s(access: A, vararg dim: Int, init: (Int) -> Byte) = bytes(access, *dim).init { i, t -> t.set(init(i)) }
    inline fun <A: ShortAccess> int16s(access: A, vararg dim: Long, init: (Int) -> Short) = shorts(access, *dim).init { i, t -> t.set(init(i)) }
    inline fun <A: ShortAccess> int16s(access: A, vararg dim: Int, init: (Int) -> Short) = shorts(access, *dim).init { i, t -> t.set(init(i)) }
    inline fun <A: IntAccess> int32s(access: A, vararg dim: Long, init: (Int) -> Int) = ints(access, *dim).init { i, t -> t.set(init(i)) }
    inline fun <A: IntAccess> int32s(access: A, vararg dim: Int, init: (Int) -> Int) = ints(access, *dim).init { i, t -> t.set(init(i)) }
    inline fun <A: LongAccess> int64s(access: A, vararg dim: Long, init: (Int) -> Long) = longs(access, *dim).init { i, t -> t.set(init(i)) }
    inline fun <A: LongAccess> int64s(access: A, vararg dim: Int, init: (Int) -> Long) = longs(access, *dim).init { i, t -> t.set(init(i)) }

    inline fun uint8s(vararg dim: Long, init: (Int) -> Int) = unsignedBytes(*dim).init { i, t -> t.set(init(i)) }
    inline fun uint8s(vararg dim: Int, init: (Int) -> Int) = unsignedBytes(*dim).init { i, t -> t.set(init(i)) }
    inline fun uint16s(vararg dim: Long, init: (Int) -> Int) = unsignedShorts(*dim).init { i, t -> t.set(init(i)) }
    inline fun uint16s(vararg dim: Int, init: (Int) -> Int) = unsignedShorts(*dim).init { i, t -> t.set(init(i)) }
    inline fun uint32s(vararg dim: Long, init: (Int) -> Long) = unsignedInts(*dim).init { i, t -> t.set(init(i)) }
    inline fun uint32s(vararg dim: Int, init: (Int) -> Long) = unsignedInts(*dim).init { i, t -> t.set(init(i)) }
    inline fun uint64s(vararg dim: Long, init: (Int) -> Long) = unsignedLongs(*dim).init { i, t -> t.set(init(i)) }
    inline fun uint64s(vararg dim: Int, init: (Int) -> Long) = unsignedLongs(*dim).init { i, t -> t.set(init(i)) }
    inline fun <A: ByteAccess> uint8s(access: A, vararg dim: Long, init: (Int) -> Int) = unsignedBytes(access, *dim).init { i, t -> t.set(init(i)) }
    inline fun <A: ByteAccess> uint8s(access: A, vararg dim: Int, init: (Int) -> Int) = unsignedBytes(access, *dim).init { i, t -> t.set(init(i)) }
    inline fun <A: ShortAccess> uint16s(access: A, vararg dim: Long, init: (Int) -> Int) = unsignedShorts(access, *dim).init { i, t -> t.set(init(i)) }
    inline fun <A: ShortAccess> uint16s(access: A, vararg dim: Int, init: (Int) -> Int) = unsignedShorts(access, *dim).init { i, t -> t.set(init(i)) }
    inline fun <A: IntAccess> uint32s(access: A, vararg dim: Long, init: (Int) -> Long) = unsignedInts(access, *dim).init { i, t -> t.set(init(i)) }
    inline fun <A: IntAccess> uint32s(access: A, vararg dim: Int, init: (Int) -> Long) = unsignedInts(access, *dim).init { i, t -> t.set(init(i)) }
    inline fun <A: LongAccess> uint64s(access: A, vararg dim: Long, init: (Int) -> Long) = unsignedLongs(access, *dim).init { i, t -> t.set(init(i)) }
    inline fun <A: LongAccess> uint64s(access: A, vararg dim: Int, init: (Int) -> Long) = unsignedLongs(access, *dim).init { i, t -> t.set(init(i)) }

    inline fun float32s(vararg dim: Long, init: (Int) -> Float) = floats(*dim).init { i, t -> t.set(init(i)) }
    inline fun float32s(vararg dim: Int, init: (Int) -> Float) = floats(*dim).init { i, t -> t.set(init(i)) }
    inline fun float64s(vararg dim: Long, init: (Int) -> Double) = doubles(*dim).init { i, t -> t.set(init(i)) }
    inline fun float64s(vararg dim: Int, init: (Int) -> Double) = doubles(*dim).init { i, t -> t.set(init(i)) }
    inline fun <A: FloatAccess> float32s(access: A, vararg dim: Long, init: (Int) -> Float) = floats(access, *dim).init { i, t -> t.set(init(i)) }
    inline fun <A: FloatAccess> float32s(access: A, vararg dim: Int, init: (Int) -> Float) = floats(access, *dim).init { i, t -> t.set(init(i)) }
    inline fun <A: DoubleAccess> float64s(access: A, vararg dim: Long, init: (Int) -> Double) = doubles(access, *dim).init { i, t -> t.set(init(i)) }
    inline fun <A: DoubleAccess> float64s(access: A, vararg dim: Int, init: (Int) -> Double) = doubles(access, *dim).init { i, t -> t.set(init(i)) }

    inline fun complex64s(vararg dim: Long, init: (Int, ComplexFloatType) -> Unit) = complexFloats(*dim).init(init)
    inline fun complex64s(vararg dim: Int, init: (Int, ComplexFloatType) -> Unit) = complexFloats(*dim).init(init)
    inline fun complex128s(vararg dim: Long, init: (Int, ComplexDoubleType) -> Unit) = complexDoubles(*dim).init(init)
    inline fun complex128s(vararg dim: Int, init: (Int, ComplexDoubleType) -> Unit) = complexDoubles(*dim).init(init)
    inline fun <A: FloatAccess> complex64s(access: A, vararg dim: Long, init: (Int, ComplexFloatType) -> Unit) = complexFloats(access, *dim).init(init)
    inline fun <A: FloatAccess> complex64s(access: A, vararg dim: Int, init: (Int, ComplexFloatType) -> Unit) = complexFloats(access, *dim).init(init)
    inline fun <A: DoubleAccess> complex128s(access: A, vararg dim: Long, init: (Int, ComplexDoubleType) -> Unit) = complexDoubles(access, *dim).init(init)
    inline fun <A: DoubleAccess> complex128s(access: A, vararg dim: Int, init: (Int, ComplexDoubleType) -> Unit) = complexDoubles(access, *dim).init(init)

