    fun int8s(vararg dim: Long) = bytes(*dim)
    fun int8s(vararg dim: Int) = bytes(*dim.longs)
    fun int16s(vararg dim: Long) = shorts(*dim)
    fun int16s(vararg dim: Int) = shorts(*dim.longs)
    fun int32s(vararg dim: Long) = ints(*dim)
    fun int32s(vararg dim: Int) = ints(*dim.longs)
    fun int64s(vararg dim: Long) = longs(*dim)
    fun int64s(vararg dim: Int) = longs(*dim.longs)
    fun <A: ByteAccess> int8s(access: A, vararg dim: Long) = bytes(access, *dim)
    fun <A: ByteAccess> int8s(access: A, vararg dim: Int) = bytes(access, *dim.longs)
    fun <A: ShortAccess> int16s(access: A, vararg dim: Long) = shorts(access, *dim)
    fun <A: ShortAccess> int16s(access: A, vararg dim: Int) = shorts(access, *dim.longs)
    fun <A: IntAccess> int32s(access: A, vararg dim: Long) = ints(access, *dim)
    fun <A: IntAccess> int32s(access: A, vararg dim: Int) = ints(access, *dim.longs)
    fun <A: LongAccess> int64s(access: A, vararg dim: Long) = longs(access, *dim)
    fun <A: LongAccess> int64s(access: A, vararg dim: Int) = longs(access, *dim.longs)

    fun uint8s(vararg dim: Long) = unsignedBytes(*dim)
    fun uint8s(vararg dim: Int) = unsignedBytes(*dim.longs)
    fun uint16s(vararg dim: Long) = unsignedShorts(*dim)
    fun uint16s(vararg dim: Int) = unsignedShorts(*dim.longs)
    fun uint32s(vararg dim: Long) = ArrayImgs.unsignedInts(*dim)!!
    fun uint32s(vararg dim: Int) = unsignedInts(*dim.longs)
    fun unsignedLongs(vararg dim: Long) = ArrayImgs.unsignedLongs(*dim)!!
    fun unsignedLongs(vararg dim: Int) = unsignedLongs(*dim.longs)
    fun uint8s(access: A, vararg dim: Long) = ArrayImgs.unsignedBytes(access, *dim)
    fun uint8s(access: A, vararg dim: Int) = unsignedBytes(access, *dim.longs)
    fun uint16s(access: A, vararg dim: Long) = ArrayImgs.unsignedShorts(access, *dim)
    fun uint16s(access: A, vararg dim: Int) = unsignedShorts(access, *dim.longs)
    fun uint32s(access: A, vararg dim: Long) = ArrayImgs.unsignedInts(access, *dim)
    fun uint32s(access: A, vararg dim: Int) = unsignedInts(access, *dim.longs)
    fun <A: LongAccess> unsignedLongs(access: A, vararg dim: Long) = ArrayImgs.unsignedLongs(access, *dim)
    fun <A: LongAccess> unsignedLongs(access: A, vararg dim: Int) = unsignedLongs(access, *dim.longs)

    fun unsigned2Bits(vararg dim: Long) = ArrayImgs.unsigned2Bits(*dim)!!
    fun unsigned2Bits(vararg dim: Int) = unsigned2Bits(*dim.longs)
    fun unsigned4Bits(vararg dim: Long) = ArrayImgs.unsigned4Bits(*dim)!!
    fun unsigned4Bits(vararg dim: Int) = unsigned4Bits(*dim.longs)
    fun unsigned12Bits(vararg dim: Long) = ArrayImgs.unsigned12Bits(*dim)!!
    fun unsigned12Bits(vararg dim: Int) = unsigned12Bits(*dim.longs)
    fun unsigned128Bits(vararg dim: Long) = ArrayImgs.unsigned128Bits(*dim)!!
    fun unsigned128Bits(vararg dim: Int) = unsigned128Bits(*dim.longs)
    fun unsignedVariableBitLengths(nbits: Int, vararg dim: Long) = ArrayImgs.unsignedVariableBitLengths(nbits, *dim)!!
    fun unsignedVariableBitLengths(nbits: Int, vararg dim: Int) = unsignedVariableBitLengths(nbits, *dim.longs)
    fun <A: LongAccess> unsigned2Bits(access: A, vararg dim: Long) = ArrayImgs.unsigned2Bits(access, *dim)
    fun <A: LongAccess> unsigned2Bits(access: A, vararg dim: Int) = unsigned2Bits(access, *dim.longs)
    fun <A: LongAccess> unsigned4Bits(access: A, vararg dim: Long) = ArrayImgs.unsigned4Bits(access, *dim)
    fun <A: LongAccess> unsigned4Bits(access: A, vararg dim: Int) = unsigned4Bits(access, *dim.longs)
    fun <A: LongAccess> unsigned128Bits(access: A, vararg dim: Long) = ArrayImgs.unsigned128Bits(access, *dim)
    fun <A: LongAccess> unsigned128Bits(access: A, vararg dim: Int) = unsigned128Bits(access, *dim.longs)
    fun <A: LongAccess> unsignedVariableBitLengths(access: A, nbits: Int, vararg dim: Long) = ArrayImgs.unsignedVariableBitLengths(access, nbits, *dim)
    fun <A: LongAccess> unsignedVariableBitLengths(access: A, nbits: Int, vararg dim: Int) = unsignedVariableBitLengths(access, nbits, *dim.longs)

    fun floats(vararg dim: Long) = ArrayImgs.floats(*dim)!!
    fun floats(vararg dim: Int) = floats(*dim.longs)
    fun doubles(vararg dim: Long) = ArrayImgs.doubles(*dim)!!
    fun doubles(vararg dim: Int) = doubles(*dim.longs)
    fun <A: FloatAccess> floats(access: A, vararg dim: Long) = ArrayImgs.floats(access, *dim)
    fun <A: FloatAccess> floats(access: A, vararg dim: Int) = floats(access, *dim.longs)
    fun <A: DoubleAccess> doubles(access: A, vararg dim: Long) = ArrayImgs.doubles(access, *dim)
    fun <A: DoubleAccess> doubles(access: A, vararg dim: Int) = doubles(access, *dim.longs)

    fun complexFloats(vararg dim: Long) = ArrayImgs.complexFloats(*dim)!!
    fun complexFloats(vararg dim: Int) = complexFloats(*dim.longs)
    fun complexDoubles(vararg dim: Long) = ArrayImgs.complexDoubles(*dim)!!
    fun complexDoubles(vararg dim: Int) = complexDoubles(*dim.longs)
    fun <A: FloatAccess> complexFloats(access: A, vararg dim: Long) = ArrayImgs.complexFloats(access, *dim)
    fun <A: FloatAccess> complexFloats(access: A, vararg dim: Int) = complexFloats(access, *dim.longs)
    fun <A: DoubleAccess> complexDoubles(access: A, vararg dim: Long) = ArrayImgs.complexDoubles(access, *dim)
    fun <A: DoubleAccess> complexDoubles(access: A, vararg dim: Int) = complexDoubles(access, *dim.longs)

    // with initializers
    inline fun <T : NativeType<T>> ArrayImg<T, *>.init(init: (Int, T) -> Unit) = also { it.forEachIndexed { i, t -> init(i, t) } }

    inline fun bits(vararg dim: Long, init: (Int) -> Boolean) = bits(*dim).init { i, t -> t.set(init(i)) }
    inline fun bits(vararg dim: Int, init: (Int) -> Boolean) = bits(*dim).init { i, t -> t.set(init(i)) }
    inline fun booleans(vararg dim: Long, init: (Int) -> Boolean) = booleans(*dim).init { i, t -> t.set(init(i)) }
    inline fun booleans(vararg dim: Int, init: (Int) -> Boolean) = booleans(*dim).init { i, t -> t.set(init(i)) }
    inline fun <A: LongAccess> bits(access: A, vararg dim: Long, init: (Int) -> Boolean) = bits(access, *dim).init { i, t -> t.set(init(i)) }
    inline fun <A: LongAccess> bits(access: A, vararg dim: Int, init: (Int) -> Boolean) = bits(access, *dim).init { i, t -> t.set(init(i)) }
    inline fun <A: BooleanAccess> booleans(access: A, vararg dim: Long, init: (Int) -> Boolean) = booleans(access, *dim).init { i, t -> t.set(init(i)) }
    inline fun <A: BooleanAccess> booleans(access: A, vararg dim: Int, init: (Int) -> Boolean) = booleans(access, *dim).init { i, t -> t.set(init(i)) }

    inline fun argbs(vararg dim: Long, init: (Int) -> Int) = argbs(*dim).init { i, t -> t.set(init(i)) }
    inline fun argbs(vararg dim: Int, init: (Int) -> Int) = argbs(*dim).init { i, t -> t.set(init(i)) }
    inline fun <A: IntAccess> argbs(access: A, vararg dim: Long, init: (Int) -> Int) = argbs(access, *dim).init { i, t -> t.set(init(i)) }
    inline fun <A: IntAccess> argbs(access: A, vararg dim: Int, init: (Int) -> Int) = argbs(access, *dim).init { i, t -> t.set(init(i)) }

    inline fun int8s(vararg dim: Long, init: (Int) -> Byte) = bytes(*dim).init { i, t -> t.set(init(i)) }
    inline fun int8s(vararg dim: Int, init: (Int) -> Byte) = bytes(*dim).init { i, t -> t.set(init(i)) }
    inline fun int16s(vararg dim: Long, init: (Int) -> Short) = shorts(*dim).init { i, t -> t.set(init(i)) }
    inline fun int16s(vararg dim: Int, init: (Int) -> Short) = shorts(*dim).init { i, t -> t.set(init(i)) }
    inline fun int32s(vararg dim: Long, init: (Int) -> Int) = ints(*dim).init { i, t -> t.set(init(i)) }
    inline fun int32s(vararg dim: Int, init: (Int) -> Int) = ints(*dim).init { i, t -> t.set(init(i)) }
    inline int64s(vararg dim: Long, init: (Int) -> Long) = longs(*dim).init { i, t -> t.set(init(i)) }
    inline int64s(vararg dim: Int, init: (Int) -> Long) = longs(*dim).init { i, t -> t.set(init(i)) }
    inline fun <A: ByteAccess> int8s(access: A, vararg dim: Long, init: (Int) -> Byte) = bytes(access, *dim).init { i, t -> t.set(init(i)) }
    inline fun <A: ByteAccess> int8s(access: A, vararg dim: Int, init: (Int) -> Byte) = bytes(access, *dim).init { i, t -> t.set(init(i)) }
    inline fun <A: ShortAccess> int16s(access: A, vararg dim: Long, init: (Int) -> Short) = shorts(access, *dim).init { i, t -> t.set(init(i)) }
    inline fun <A: ShortAccess> int16s(access: A, vararg dim: Int, init: (Int) -> Short) = shorts(access, *dim).init { i, t -> t.set(init(i)) }
    inline fun <A: IntAccess> int32s(access: A, vararg dim: Long, init: (Int) -> Int) = ints(access, *dim).init { i, t -> t.set(init(i)) }
    inline fun <A: IntAccess> int32s(access: A, vararg dim: Int, init: (Int) -> Int) = ints(access, *dim).init { i, t -> t.set(init(i)) }
    inline fun <A: LongAccess> int64s(access: A, vararg dim: Long, init: (Int) -> Long) = longs(access, *dim).init { i, t -> t.set(init(i)) }
    inline fun <A: LongAccess> int64s(access: A, vararg dim: Int, init: (Int) -> Long) = longs(access, *dim).init { i, t -> t.set(init(i)) }

    inline fun uint8s(vararg dim: Long, init: (Int) -> Int) = unsignedBytes(*dim).init { i, t -> t.set(init(i)) }
    inline fun uint8s(vararg dim: Int, init: (Int) -> Int) = unsignedBytes(*dim).init { i, t -> t.set(init(i)) }
    inline fun uint16s(vararg dim: Long, init: (Int) -> Int) = unsignedShorts(*dim).init { i, t -> t.set(init(i)) }
    inline fun uint16s(vararg dim: Int, init: (Int) -> Int) = unsignedShorts(*dim).init { i, t -> t.set(init(i)) }
    inline fun uint32s(vararg dim: Long, init: (Int) -> Long) = unsignedInts(*dim).init { i, t -> t.set(init(i)) }
    inline fun uint32s(vararg dim: Int, init: (Int) -> Long) = unsignedInts(*dim).init { i, t -> t.set(init(i)) }
    inline fun unsignedLongs(vararg dim: Long, init: (Int) -> Long) = unsignedLongs(*dim).init { i, t -> t.set(init(i)) }
    inline fun unsignedLongs(vararg dim: Int, init: (Int) -> Long) = unsignedLongs(*dim).init { i, t -> t.set(init(i)) }
    inline fun uint8s(access: A, vararg dim: Long, init: (Int) -> Int) = unsignedBytes(access, *dim).init { i, t -> t.set(init(i)) }
    inline fun uint8s(access: A, vararg dim: Int, init: (Int) -> Int) = unsignedBytes(access, *dim).init { i, t -> t.set(init(i)) }
    inline fun uint16s(access: A, vararg dim: Long, init: (Int) -> Int) = unsignedShorts(access, *dim).init { i, t -> t.set(init(i)) }
    inline fun uint16s(access: A, vararg dim: Int, init: (Int) -> Int) = unsignedShorts(access, *dim).init { i, t -> t.set(init(i)) }
    inline fun uint32s(access: A, vararg dim: Long, init: (Int) -> Long) = unsignedInts(access, *dim).init { i, t -> t.set(init(i)) }
    inline fun uint32s(access: A, vararg dim: Int, init: (Int) -> Long) = unsignedInts(access, *dim).init { i, t -> t.set(init(i)) }
    inline fun <A: LongAccess> unsignedLongs(access: A, vararg dim: Long, init: (Int) -> Long) = unsignedLongs(access, *dim).init { i, t -> t.set(init(i)) }
    inline fun <A: LongAccess> unsignedLongs(access: A, vararg dim: Int, init: (Int) -> Long) = unsignedLongs(access, *dim).init { i, t -> t.set(init(i)) }

    inline fun unsigned2Bits(vararg dim: Long, init: (Int) -> Long) = unsigned2Bits(*dim).init { i, t -> t.set(init(i)) }
    inline fun unsigned2Bits(vararg dim: Int, init: (Int) -> Long) = unsigned2Bits(*dim).init { i, t -> t.set(init(i)) }
    inline fun unsigned4Bits(vararg dim: Long, init: (Int) -> Long) = unsigned4Bits(*dim).init { i, t -> t.set(init(i)) }
    inline fun unsigned4Bits(vararg dim: Int, init: (Int) -> Long) = unsigned4Bits(*dim).init { i, t -> t.set(init(i)) }
    inline fun unsigned12Bits(vararg dim: Long, init: (Int) -> Long) = unsigned12Bits(*dim).init { i, t -> t.set(init(i)) }
    inline fun unsigned12Bits(vararg dim: Int, init: (Int) -> Long) = unsigned12Bits(*dim).init { i, t -> t.set(init(i)) }
    inline fun unsigned128Bits(vararg dim: Long, init: (Int) -> BigInteger) = unsigned128Bits(*dim).init { i, t -> t.set(init(i)) }
    inline fun unsigned128Bits(vararg dim: Int, init: (Int) -> BigInteger) = unsigned128Bits(*dim).init { i, t -> t.set(init(i)) }
    inline fun unsignedVariableBitLengths(nbits: Int, vararg dim: Long, init: (Int) -> Long) = unsignedVariableBitLengths(nbits, *dim).init { i, t -> t.set(init(i)) }
    inline fun unsignedVariableBitLengths(nbits: Int, vararg dim: Int, init: (Int) -> Long) = unsignedVariableBitLengths(nbits, *dim).init { i, t -> t.set(init(i)) }
    inline fun <A: LongAccess> unsigned2Bits(access: A, vararg dim: Long, init: (Int) -> Long) = unsigned2Bits(access, *dim).init { i, t -> t.set(init(i)) }
    inline fun <A: LongAccess> unsigned2Bits(access: A, vararg dim: Int, init: (Int) -> Long) = unsigned2Bits(access, *dim).init { i, t -> t.set(init(i)) }
    inline fun <A: LongAccess> unsigned4Bits(access: A, vararg dim: Long, init: (Int) -> Long) = unsigned4Bits(access, *dim).init { i, t -> t.set(init(i)) }
    inline fun <A: LongAccess> unsigned4Bits(access: A, vararg dim: Int, init: (Int) -> Long) = unsigned4Bits(access, *dim).init { i, t -> t.set(init(i)) }
    inline fun <A: LongAccess> unsigned128Bits(access: A, vararg dim: Long, init: (Int) -> BigInteger) = unsigned128Bits(access, *dim).init { i, t -> t.set(init(i)) }
    inline fun <A: LongAccess> unsigned128Bits(access: A, vararg dim: Int, init: (Int) -> BigInteger) = unsigned128Bits(access, *dim).init { i, t -> t.set(init(i)) }
    inline fun <A: LongAccess> unsignedVariableBitLengths(access: A, nbits: Int, vararg dim: Long, init: (Int) -> Long) = unsignedVariableBitLengths(access, nbits, *dim).init { i, t -> t.set(init(i)) }
    inline fun <A: LongAccess> unsignedVariableBitLengths(access: A, nbits: Int, vararg dim: Int, init: (Int) -> Long) = unsignedVariableBitLengths(access, nbits, *dim).init { i, t -> t.set(init(i)) }

    inline fun floats(vararg dim: Long, init: (Int) -> Float) = floats(*dim).init { i, t -> t.set(init(i)) }
    inline fun floats(vararg dim: Int, init: (Int) -> Float) = floats(*dim).init { i, t -> t.set(init(i)) }
    inline fun doubles(vararg dim: Long, init: (Int) -> Double) = doubles(*dim).init { i, t -> t.set(init(i)) }
    inline fun doubles(vararg dim: Int, init: (Int) -> Double) = doubles(*dim).init { i, t -> t.set(init(i)) }
    inline fun <A: FloatAccess> floats(access: A, vararg dim: Long, init: (Int) -> Float) = floats(access, *dim).init { i, t -> t.set(init(i)) }
    inline fun <A: FloatAccess> floats(access: A, vararg dim: Int, init: (Int) -> Float) = floats(access, *dim).init { i, t -> t.set(init(i)) }
    inline fun <A: DoubleAccess> doubles(access: A, vararg dim: Long, init: (Int) -> Double) = doubles(access, *dim).init { i, t -> t.set(init(i)) }
    inline fun <A: DoubleAccess> doubles(access: A, vararg dim: Int, init: (Int) -> Double) = doubles(access, *dim).init { i, t -> t.set(init(i)) }

    inline fun complexFloats(vararg dim: Long, init: (Int, ComplexFloatType) -> Unit) = complexFloats(*dim).init(init)
    inline fun complexFloats(vararg dim: Int, init: (Int, ComplexFloatType) -> Unit) = complexFloats(*dim).init(init)
    inline fun complexDoubles(vararg dim: Long, init: (Int, ComplexDoubleType) -> Unit) = complexDoubles(*dim).init(init)
    inline fun complexDoubles(vararg dim: Int, init: (Int, ComplexDoubleType) -> Unit) = complexDoubles(*dim).init(init)
    inline fun <A: FloatAccess> complexFloats(access: A, vararg dim: Long, init: (Int, ComplexFloatType) -> Unit) = complexFloats(access, *dim).init(init)
    inline fun <A: FloatAccess> complexFloats(access: A, vararg dim: Int, init: (Int, ComplexFloatType) -> Unit) = complexFloats(access, *dim).init(init)
    inline fun <A: DoubleAccess> complexDoubles(access: A, vararg dim: Long, init: (Int, ComplexDoubleType) -> Unit) = complexDoubles(access, *dim).init(init)
    inline fun <A: DoubleAccess> complexDoubles(access: A, vararg dim: Int, init: (Int, ComplexDoubleType) -> Unit) = complexDoubles(access, *dim).init(init)